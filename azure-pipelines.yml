# Azure Pipeline to sync Azure DevOps repository to GitHub
# This pipeline runs when changes are pushed to the main branch in Azure DevOps
# It syncs the changes to GitHub, which then triggers GitHub Pages deployment

trigger:
  branches:
    include:
      - main
      - master

# No PR triggers - we only want to sync on direct pushes to main
pr: none

pool:
  name: 'Default'

variables:
  # These will be set in Azure DevOps pipeline variables (keep them secret)
  - name: GITHUB_REPO_URL
    value: 'https://github.com/esola-thomas/huitzo'
  - name: GITHUB_USERNAME
    value: 'esola-thomas'

stages:
- stage: SyncToGitHub
  displayName: 'Sync to GitHub Repository'
  jobs:
  - job: GitHubSync
    displayName: 'Sync Repository to GitHub'
    steps:

    # Checkout the source code from Azure DevOps
    - checkout: self
      persistCredentials: true
      clean: true
      fetchDepth: 0  # Full clone for proper git history

    # Configure Git user for the sync
    - script: |
        git config --global user.name "Azure DevOps Pipeline"
        git config --global user.email "pipeline@azuredevops.com"
      displayName: 'Configure Git User'

    # Add GitHub as a remote repository
    - script: |
        git remote add github https://$(GITHUB_TOKEN)@github.com/$(GITHUB_USERNAME)/huitzo.git
        git remote -v
      displayName: 'Add GitHub Remote'
      env:
        GITHUB_TOKEN: $(GITHUB_PERSONAL_ACCESS_TOKEN)

    # Fetch GitHub main branch to compare
    - script: |
        echo "Fetching GitHub main branch..."
        git fetch github main:github-main 2>/dev/null || echo "GitHub main branch doesn't exist yet"
      displayName: 'Fetch GitHub Branch'
      env:
        GITHUB_TOKEN: $(GITHUB_PERSONAL_ACCESS_TOKEN)

    # Create new commit with custom message and sync to GitHub
    - script: |
        echo "Current branch: $(git branch --show-current)"
        echo "Fetching latest from origin..."
        git fetch origin

        # Get the latest commit info from Azure DevOps origin/main (not local main)
        AZURE_COMMIT_HASH=$(git rev-parse origin/main)
        AZURE_COMMIT_MSG=$(git log -1 --pretty=format:"%s" origin/main)
        AZURE_AUTHOR=$(git log -1 --pretty=format:"%an" origin/main)

        echo "Latest Azure DevOps commit: $AZURE_COMMIT_HASH"
        echo "Original commit message: $AZURE_COMMIT_MSG"
        echo "Original author: $AZURE_AUTHOR"

        # Check if GitHub repo exists and has commits
        if git show-ref --verify --quiet refs/remotes/github/main; then
          echo "GitHub main branch exists, checking for differences..."
          GITHUB_COMMIT_HASH=$(git rev-parse github/main)

          # Check if the commits are different
          if [ "$AZURE_COMMIT_HASH" = "$GITHUB_COMMIT_HASH" ]; then
            echo "No changes to sync - commits are identical"
            exit 0
          fi

          echo "Changes detected, creating sync branch from GitHub main..."
          git checkout -b sync-branch github/main
        else
          echo "GitHub main branch doesn't exist, creating new branch..."
          git checkout -b sync-branch origin/main
        fi

        # Reset to match Azure DevOps main (gets all the latest file changes)
        echo "Syncing latest changes from Azure DevOps origin/main..."
        git reset --hard origin/main

        # Create custom commit message with timestamp
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        CUSTOM_COMMIT_MSG="sync_${TIMESTAMP}: ${AZURE_COMMIT_MSG}"

        echo "Creating new commit with message: $CUSTOM_COMMIT_MSG"

        # Amend the commit with new message
        git commit --amend -m "$CUSTOM_COMMIT_MSG" --no-edit

        echo "Pushing to GitHub main branch..."
        git push github sync-branch:main --force-with-lease

        echo "Sync completed successfully!"
      displayName: 'Sync to GitHub with Custom Commit'
      env:
        GITHUB_TOKEN: $(GITHUB_PERSONAL_ACCESS_TOKEN)

    # Optional: Create a GitHub release tag for major updates
    - script: |
        if [ "$(Build.SourceBranch)" = "refs/heads/main" ] && [ "$(CREATE_GITHUB_RELEASE)" = "true" ]; then
          TAG_NAME="v$(date +%Y.%m.%d)-build$(Build.BuildNumber)"
          echo "Creating GitHub release tag: $TAG_NAME"
          git tag -a "$TAG_NAME" -m "Automated release from Azure DevOps - Build $(Build.BuildNumber)"
          git push github "$TAG_NAME"
        else
          echo "Skipping GitHub release creation"
        fi
      displayName: 'Create GitHub Release (Optional)'
      env:
        GITHUB_TOKEN: $(GITHUB_PERSONAL_ACCESS_TOKEN)
      condition: and(succeeded(), eq(variables['CREATE_GITHUB_RELEASE'], 'true'))

# Optional: Notification stage to confirm sync
- stage: Notification
  displayName: 'Sync Notification'
  dependsOn: SyncToGitHub
  condition: always()
  jobs:
  - job: NotifySync
    displayName: 'Notify Sync Status'
    steps:
    - script: |
        if [ "$(Agent.JobStatus)" = "Succeeded" ]; then
          echo "✅ Successfully synced to GitHub!"
          echo "GitHub Pages deployment should start automatically."
          echo "Check: https://github.com/$(GITHUB_USERNAME)/huitzo/actions"
        else
          echo "❌ GitHub sync failed. Please check the logs."
        fi
      displayName: 'Sync Status'