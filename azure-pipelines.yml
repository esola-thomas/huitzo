# Azure Pipeline to sync Azure DevOps repository to GitHub
# This pipeline runs when changes are pushed to the main branch in Azure DevOps
# It syncs the changes to GitHub, which then triggers GitHub Pages deployment

trigger:
  branches:
    include:
      - main
      - master

# No PR triggers - we only want to sync on direct pushes to main
pr: none

pool:
  name: 'Default'

variables:
  # Reference the variable group from Azure DevOps Library
  - group: 'GitHub Public repo sync'
  # Additional variables
  - name: GITHUB_REPO_URL
    value: 'https://github.com/esola-thomas/huitzo'
  - name: GITHUB_USERNAME
    value: 'esola-thomas'

stages:
- stage: SyncToGitHub
  displayName: 'Sync to GitHub Repository'
  jobs:
  - job: GitHubSync
    displayName: 'Sync Repository to GitHub'
    steps:

    # Checkout the source code from Azure DevOps
    - checkout: self
      persistCredentials: true
      clean: true
      fetchDepth: 0  # Full clone for proper git history

    # Configure Git user for the sync
    - script: |
        git config --global user.name "Azure DevOps Pipeline"
        git config --global user.email "pipeline@azuredevops.com"
      displayName: 'Configure Git User'

    # Create isolated workspace in /tmp
    - script: |
        WORKSPACE_DIR="/tmp/azure-sync-$(Build.BuildId)"
        echo "Creating isolated workspace at: $WORKSPACE_DIR"

        # Clean up any existing workspace from previous runs
        rm -rf "$WORKSPACE_DIR"
        mkdir -p "$WORKSPACE_DIR"

        echo "##vso[task.setvariable variable=WORKSPACE_DIR]$WORKSPACE_DIR"
        echo "Workspace created successfully"
      displayName: 'Create Isolated Workspace'

    # Clone Azure DevOps repository to workspace
    - script: |
        cd $(WORKSPACE_DIR)
        echo "Cloning Azure DevOps repository..."

        # Clone current repository with full history
        git clone --branch main $(Build.Repository.Uri) azure-repo
        cd azure-repo

        # Get latest commit info
        AZURE_COMMIT_HASH=$(git rev-parse HEAD)
        AZURE_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
        AZURE_AUTHOR=$(git log -1 --pretty=format:"%an <%ae>")

        echo "Azure DevOps main branch:"
        echo "  Commit: $AZURE_COMMIT_HASH"
        echo "  Message: $AZURE_COMMIT_MSG"
        echo "  Author: $AZURE_AUTHOR"

        # Save commit info for later use
        echo "##vso[task.setvariable variable=AZURE_COMMIT_HASH]$AZURE_COMMIT_HASH"
        echo "##vso[task.setvariable variable=AZURE_COMMIT_MSG]$AZURE_COMMIT_MSG"
        echo "##vso[task.setvariable variable=AZURE_AUTHOR]$AZURE_AUTHOR"
      displayName: 'Clone Azure DevOps Repository'

    # Clone GitHub repository and verify content
    - script: |
        cd $(WORKSPACE_DIR)
        echo "Cloning GitHub repository..."

        # Clone GitHub repository
        if git clone https://$(GITHUB_PERSONAL_ACCESS_TOKEN)@github.com/$(GITHUB_USERNAME)/huitzo.git github-repo 2>/dev/null; then
          echo "GitHub repository cloned successfully"
          cd github-repo

          GITHUB_COMMIT_HASH=$(git rev-parse HEAD)
          echo "GitHub main branch commit: $GITHUB_COMMIT_HASH"

          # Check if commits are identical
          if [ "$GITHUB_COMMIT_HASH" = "$(AZURE_COMMIT_HASH)" ]; then
            echo "✅ Repositories are already in sync (same commit hash)"
            echo "##vso[task.setvariable variable=SKIP_SYNC]true"
            exit 0
          fi

          # Compute content hash of source code (excluding .git)
          echo "Computing content hash for GitHub repository..."
          cd $(WORKSPACE_DIR)/github-repo
          GITHUB_HASH=$(find . -type f ! -path './.git/*' -exec md5sum {} \; | sort -k 2 | md5sum | awk '{print $1}')

          cd $(WORKSPACE_DIR)/azure-repo
          echo "Computing content hash for Azure DevOps repository..."
          AZURE_HASH=$(find . -type f ! -path './.git/*' -exec md5sum {} \; | sort -k 2 | md5sum | awk '{print $1}')

          echo "GitHub content hash: $GITHUB_HASH"
          echo "Azure DevOps content hash: $AZURE_HASH"

          if [ "$GITHUB_HASH" = "$AZURE_HASH" ]; then
            echo "✅ Content is identical - no sync needed"
            echo "##vso[task.setvariable variable=SKIP_SYNC]true"
          else
            echo "⚠️ Content differs - sync required"
            echo "##vso[task.setvariable variable=SKIP_SYNC]false"
          fi
        else
          echo "GitHub repository doesn't exist or is empty - will create initial sync"
          echo "##vso[task.setvariable variable=SKIP_SYNC]false"
        fi
      displayName: 'Verify Content Match'

    # Sync to GitHub with single commit
    - script: |
        if [ "$(SKIP_SYNC)" = "true" ]; then
          echo "Skipping sync - no changes detected"
          exit 0
        fi

        echo "Starting sync to GitHub..."
        cd $(WORKSPACE_DIR)/azure-repo

        # Add GitHub as remote
        git remote add github https://$(GITHUB_PERSONAL_ACCESS_TOKEN)@github.com/$(GITHUB_USERNAME)/huitzo.git

        # Fetch GitHub to ensure we have latest refs
        git fetch github 2>/dev/null || echo "GitHub fetch failed (might be empty repo)"

        # Create sync commit message
        TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S UTC")
        SYNC_COMMIT_MSG="sync: $(AZURE_COMMIT_MSG)

Synced from Azure DevOps at $TIMESTAMP
Original commit: $(AZURE_COMMIT_HASH)"

        echo "Sync commit message:"
        echo "$SYNC_COMMIT_MSG"

        # Force push to GitHub main (bypasses branch protection)
        echo "Force pushing to GitHub main branch..."
        if git push https://$(GITHUB_PERSONAL_ACCESS_TOKEN)@github.com/$(GITHUB_USERNAME)/huitzo.git HEAD:main --force; then
          echo "✅ Successfully synced to GitHub!"
          echo "GitHub Pages deployment will start automatically"
        else
          echo "❌ Failed to push to GitHub"
          echo "Please verify:"
          echo "  1. GitHub Personal Access Token has 'repo' permissions"
          echo "  2. Token is not expired"
          echo "  3. Repository exists at: https://github.com/$(GITHUB_USERNAME)/huitzo"
          exit 1
        fi
      displayName: 'Sync to GitHub'
      condition: ne(variables['SKIP_SYNC'], 'true')

    # Cleanup workspace
    - script: |
        echo "Cleaning up workspace..."
        rm -rf $(WORKSPACE_DIR)
        echo "✅ Workspace cleaned successfully"
      displayName: 'Cleanup Workspace'
      condition: always()

    # Optional: Create a GitHub release tag for major updates
    - script: |
        if [ "$(Build.SourceBranch)" = "refs/heads/main" ] && [ "$(CREATE_GITHUB_RELEASE)" = "true" ]; then
          TAG_NAME="v$(date +%Y.%m.%d)-build$(Build.BuildNumber)"
          echo "Creating GitHub release tag: $TAG_NAME"
          git tag -a "$TAG_NAME" -m "Automated release from Azure DevOps - Build $(Build.BuildNumber)"
          git push github "$TAG_NAME"
        else
          echo "Skipping GitHub release creation"
        fi
      displayName: 'Create GitHub Release (Optional)'
      condition: and(succeeded(), eq(variables['CREATE_GITHUB_RELEASE'], 'true'))

# Optional: Notification stage to confirm sync
- stage: Notification
  displayName: 'Sync Notification'
  dependsOn: SyncToGitHub
  condition: always()
  jobs:
  - job: NotifySync
    displayName: 'Notify Sync Status'
    steps:
    - script: |
        if [ "$(Agent.JobStatus)" = "Succeeded" ]; then
          echo "✅ Successfully synced to GitHub!"
          echo "GitHub Pages deployment should start automatically."
          echo "Check: https://github.com/$(GITHUB_USERNAME)/huitzo/actions"
        else
          echo "❌ GitHub sync failed. Please check the logs."
        fi
      displayName: 'Sync Status'