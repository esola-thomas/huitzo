# Azure Pipeline to sync Azure DevOps repository to GitHub (main)
# Uses self-hosted pool 'Default' and a Library variable group containing GITHUB_PERSONAL_ACCESS_TOKEN

trigger:
  branches:
    include:
      - main
      - master

pr: none

# Self-hosted agent pool
pool:
  name: 'Default'

variables:
# Import your Library variable group (must contain secret: GITHUB_PERSONAL_ACCESS_TOKEN)
- group: 'GitHub Public repo sync'

# GitHub settings
- name: GITHUB_OWNER
  value: 'esola-thomas'
- name: GITHUB_REPO
  value: 'huitzo'
- name: GITHUB_BRANCH
  value: 'main'
- name: CREATE_GITHUB_RELEASE
  value: 'false'

stages:
- stage: SyncToGitHub
  displayName: 'Sync to GitHub Repository'
  jobs:
  - job: GitHubSync
    displayName: 'Sync Repository to GitHub'
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
      fetchDepth: 0

    - script: |
        set -euo pipefail
        git config --global user.name "Azure DevOps Pipeline"
        git config --global user.email "pipeline@azuredevops.com"
      displayName: 'Configure Git User'

    # Safer auth: rewrite https://github.com to include username + PAT (token not embedded in remote URL)
    - script: |
        set -euo pipefail
        git config --global url."https://${GITHUB_USER}:${GITHUB_PAT}@github.com/".insteadOf "https://github.com/"
        # (Re)add a clean remote without token in URL
        git remote remove github 2>/dev/null || true
        git remote add github "https://github.com/${GITHUB_OWNER}/${GITHUB_REPO}.git"
        git remote get-url github
      displayName: 'Configure Git Auth (no token in remote)'
      env:
        GITHUB_USER: esola-thomas
        GITHUB_PAT: $(GITHUB_PERSONAL_ACCESS_TOKEN)

    - script: |
        set -euo pipefail
        echo "Source branch: $(Build.SourceBranch)"
        SRC_BRANCH="$(Build.SourceBranchName)"

        echo "Fetching latest from origin..."
        git fetch origin --prune

        echo "Checking out ${SRC_BRANCH}..."
        git checkout "${SRC_BRANCH}" || git checkout -b "${SRC_BRANCH}"

        echo "Fast-forwarding local branch from origin/${SRC_BRANCH}..."
        git pull --ff-only origin "${SRC_BRANCH}"

        echo "Pushing ${SRC_BRANCH} -> ${GITHUB_BRANCH} to GitHub..."
        git push github "HEAD:${GITHUB_BRANCH}" --force-with-lease

        echo "✅ Sync completed."
      displayName: 'Sync to GitHub'
      env:
        GITHUB_BRANCH: $(GITHUB_BRANCH)

    # Optional: tag a release on GitHub (disabled by default)
    - script: |
        set -euo pipefail
        TAG_NAME="v$(date +%Y.%m.%d)-build$(Build.BuildNumber)"
        echo "Creating GitHub release tag: $TAG_NAME"
        git tag -a "$TAG_NAME" -m "Automated release from Azure DevOps - Build $(Build.BuildNumber)"
        git push github "$TAG_NAME"
      displayName: 'Create GitHub Release (Optional)'
      condition: and(succeeded(), eq(variables['CREATE_GITHUB_RELEASE'], 'true'))

- stage: Notification
  displayName: 'Sync Notification'
  dependsOn: SyncToGitHub
  condition: always()
  jobs:
  - job: NotifySync
    displayName: 'Notify Sync Status'
    steps:
    - script: |
        if [ "$(Agent.JobStatus)" = "Succeeded" ]; then
          echo "✅ Successfully synced to GitHub!"
          echo "GitHub Actions/Pages should trigger on pushes to $(GITHUB_BRANCH)."
          echo "Check: https://github.com/$(GITHUB_OWNER)/$(GITHUB_REPO)/actions"
        else
          echo "❌ GitHub sync failed. Please check the logs."
        fi
      displayName: 'Sync Status'
