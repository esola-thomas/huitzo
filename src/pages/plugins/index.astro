---
import Layout from '~/layouts/PageLayout.astro';
import PluginCard from '~/components/PluginCard.astro';
import { loadAllPlugins, getAllCategories, getPluginsByStatusGroups } from '~/utils/plugins';

// Load all plugins and group by status
const allPlugins = await loadAllPlugins();
const pluginsByStatus = await getPluginsByStatusGroups();

// Get unique categories for filtering
const uniqueCategories = await getAllCategories();
const categories = ['All', ...uniqueCategories.map(c => c.charAt(0).toUpperCase() + c.slice(1))];
const statuses = ['All', 'Active', 'Beta', 'Coming Soon', 'Idea Phase'];

// Calculate counts for each category
const categoryCounts = uniqueCategories.reduce((acc, cat) => {
  acc[cat] = allPlugins.filter(p => p.category === cat).length;
  return acc;
}, {} as Record<string, number>);

// Status sections to display
const statusSections = [
  {
    id: 'active',
    title: 'Active Plugins',
    description: 'Ready to install and use right now',
    plugins: pluginsByStatus.active,
    showSection: pluginsByStatus.active.length > 0,
  },
  {
    id: 'beta',
    title: 'Beta Testing',
    description: 'Try these new plugins and help us improve them',
    plugins: pluginsByStatus.beta,
    showSection: pluginsByStatus.beta.length > 0,
  },
  {
    id: 'coming-soon',
    title: 'Coming Soon',
    description: 'Plugins currently in development - view planned features and documentation',
    plugins: pluginsByStatus.comingSoon,
    showSection: pluginsByStatus.comingSoon.length > 0,
  },
  {
    id: 'idea-phase',
    title: 'Idea Phase',
    description: 'Concepts being explored - help shape these plugins with your feedback',
    plugins: pluginsByStatus.ideaPhase,
    showSection: pluginsByStatus.ideaPhase.length > 0,
  },
];
---

<Layout
  metadata={{
    title: 'Available Plugins',
    description: 'Extend Huitzo with specialized intelligence services. Browse our plugin directory to find tools for financial analysis and more.',
  }}
>
  <!-- Header Section -->
  <section class="py-20">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto text-center">
        <h1 class="text-4xl lg:text-5xl font-bold text-default mb-6">
          Available <span class="text-gradient animated-gradient">Plugins</span>
        </h1>
        <p class="text-lg text-muted mb-8 max-w-2xl mx-auto">
          Extend Huitzo with specialized intelligence services. Each plugin provides
          a complete solution for a specific data analysis domain.
        </p>

        <!-- Stats -->
        <div class="grid grid-cols-2 sm:grid-cols-4 gap-6 max-w-3xl mx-auto">
          <div class="text-center">
            <div class="text-2xl font-bold text-primary font-mono">
              {pluginsByStatus.active.length}
            </div>
            <div class="text-sm text-muted">Active</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-primary font-mono">
              {pluginsByStatus.beta.length}
            </div>
            <div class="text-sm text-muted">Beta</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-primary font-mono">
              {pluginsByStatus.comingSoon.length}
            </div>
            <div class="text-sm text-muted">Coming Soon</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-primary font-mono">
              {pluginsByStatus.ideaPhase.length}
            </div>
            <div class="text-sm text-muted">Ideas</div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Search and Filter Section -->
  <section class="py-12 bg-[var(--aw-color-bg-secondary)]/30">
    <div class="container mx-auto px-4">
      <div class="max-w-6xl mx-auto">
        <div class="flex flex-col md:flex-row gap-4 items-center justify-between mb-4">
          <!-- Search Bar -->
          <div class="flex-1 max-w-md w-full">
            <div class="relative">
              <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-muted" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
              <input
                type="text"
                id="plugin-search"
                placeholder="Search plugins..."
                class="w-full pl-10 pr-4 py-3 bg-[var(--aw-color-bg-tertiary)] border border-gray-700 rounded-lg text-default placeholder-text-muted focus:outline-none focus:border-primary transition-colors"
              />
            </div>
          </div>

          <!-- Filters -->
          <div class="flex gap-4 w-full md:w-auto">
            <select
              id="category-filter"
              class="flex-1 md:flex-none px-4 py-3 bg-[var(--aw-color-bg-tertiary)] border border-gray-700 rounded-lg text-default focus:outline-none focus:border-primary transition-colors"
            >
              <option value="all">All Categories</option>
              {uniqueCategories.map(category => (
                <option value={category}>
                  {category.charAt(0).toUpperCase() + category.slice(1)} ({categoryCounts[category]})
                </option>
              ))}
            </select>

            <select
              id="status-filter"
              class="flex-1 md:flex-none px-4 py-3 bg-[var(--aw-color-bg-tertiary)] border border-gray-700 rounded-lg text-default focus:outline-none focus:border-primary transition-colors"
            >
              <option value="all">All Status</option>
              <option value="active">Active ({pluginsByStatus.active.length})</option>
              <option value="beta">Beta ({pluginsByStatus.beta.length})</option>
              <option value="coming-soon">Coming Soon ({pluginsByStatus.comingSoon.length})</option>
              <option value="idea-phase">Idea Phase ({pluginsByStatus.ideaPhase.length})</option>
            </select>
          </div>
        </div>

        <!-- Results Count -->
        <div id="results-count" class="text-sm text-muted">
          Showing <span id="visible-count" class="text-primary font-medium">{allPlugins.length}</span> of {allPlugins.length} plugins
        </div>

        <!-- Active Filters -->
        <div id="active-filters" class="hidden mt-4 flex flex-wrap gap-2 items-center">
          <span class="text-sm text-muted">Active filters:</span>
          <button id="clear-all-filters" class="text-xs px-3 py-1 bg-huitzo-accent/20 text-huitzo-accent rounded-full hover:bg-huitzo-accent/30 transition-colors">
            Clear All ‚úï
          </button>
        </div>
      </div>
    </div>
  </section>

  <!-- Plugin Sections by Status -->
  {statusSections.map(section => section.showSection && (
    <section id={`section-${section.id}`} class="py-20 plugin-status-section" data-section-status={section.id}>
      <div class="container mx-auto px-4">
        <div class="max-w-6xl mx-auto">
          <!-- Section Header -->
          <div class="mb-10">
            <h2 class="text-3xl font-bold text-default mb-2">
              {section.title}
              <span class="text-lg text-muted font-normal ml-3">({section.plugins.length})</span>
            </h2>
            <p class="text-muted">{section.description}</p>
          </div>

          <!-- Plugins Grid -->
          <div class="plugin-section-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {section.plugins.map(plugin => (
              <div
                class="plugin-card"
                data-category={plugin.category}
                data-status={plugin.status}
                data-name={plugin.name.toLowerCase()}
              >
                <PluginCard plugin={plugin} />
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  ))}

  <!-- Empty State -->
  <section id="empty-state" class="hidden py-20">
    <div class="container mx-auto px-4">
      <div class="max-w-6xl mx-auto text-center">
        <div class="text-6xl mb-4">üîç</div>
        <h3 class="text-xl font-semibold text-default mb-2">No plugins found</h3>
        <p class="text-muted mb-6">
          No plugins match your current search criteria. Try adjusting your filters.
        </p>
        <button id="clear-filters-empty" class="btn-secondary">
          Clear Filters
        </button>
      </div>
    </div>
  </section>

  <!-- Call to Action -->
  <section class="py-20 bg-[var(--aw-color-bg-secondary)]/30">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto text-center">
        <h2 class="text-3xl font-bold text-default mb-6">
          Ready to get <span class="text-gradient animated-gradient">started</span>?
        </h2>
        <p class="text-lg text-muted mb-8">
          Install plugins and start building intelligent analysis workflows with simple commands.
        </p>

        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a href="https://cli.huitzo.com" target="_blank" rel="noopener" class="btn-primary">
            Command Your Intelligence (Launching Soon) ‚Üí
          </a>
          <a href={`${import.meta.env.BASE_URL}roadmap`} class="btn-secondary">
            View Roadmap
          </a>
        </div>

        <!-- Plugin Request -->
        <div class="mt-12 pt-8 border-t border-gray-700">
          <h3 class="text-lg font-semibold text-default mb-2">Need a specific plugin?</h3>
          <p class="text-sm text-muted mb-4">
            Have an idea for an intelligence service that doesn't exist yet?
          </p>
          <a href="mailto:huitzo@solathomas.com?subject=Plugin Request" class="text-primary hover:underline">
            Send us your plugin request ‚Üí
          </a>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('plugin-search') as HTMLInputElement | null;
    const categoryFilter = document.getElementById('category-filter') as HTMLSelectElement | null;
    const statusFilter = document.getElementById('status-filter') as HTMLSelectElement | null;
    const emptyState = document.getElementById('empty-state') as HTMLElement | null;
    const visibleCountSpan = document.getElementById('visible-count') as HTMLSpanElement | null;
    const activeFiltersDiv = document.getElementById('active-filters') as HTMLElement | null;
    const clearAllBtn = document.getElementById('clear-all-filters') as HTMLButtonElement | null;
    const clearEmptyBtn = document.getElementById('clear-filters-empty') as HTMLButtonElement | null;

    function filterPlugins() {
      if (!searchInput || !categoryFilter || !statusFilter || !emptyState || !visibleCountSpan) return;

      const searchTerm = searchInput.value.toLowerCase().trim();
      const selectedCategory = categoryFilter.value;
      const selectedStatus = statusFilter.value;

      const sections = document.querySelectorAll('.plugin-status-section');
      let totalVisibleCount = 0;
      let hasActiveFilters = false;

      // Check if filters are active
      if (searchTerm || selectedCategory !== 'all' || selectedStatus !== 'all') {
        hasActiveFilters = true;
      }

      // Show/hide active filters bar
      if (activeFiltersDiv) {
        if (hasActiveFilters) {
          activeFiltersDiv.classList.remove('hidden');
        } else {
          activeFiltersDiv.classList.add('hidden');
        }
      }

      sections.forEach(section => {
        const htmlSection = section as HTMLElement;
        const sectionStatus = htmlSection.dataset.sectionStatus || '';
        const pluginCards = htmlSection.querySelectorAll('.plugin-card');
        let sectionVisibleCount = 0;

        pluginCards.forEach(card => {
          const htmlCard = card as HTMLElement;
          const cardName = htmlCard.dataset.name || '';
          const cardCategory = htmlCard.dataset.category || '';
          const cardStatus = htmlCard.dataset.status || '';

          const matchesSearch = !searchTerm || cardName.includes(searchTerm);
          const matchesCategory = selectedCategory === 'all' || cardCategory === selectedCategory;
          const matchesStatus = selectedStatus === 'all' || cardStatus === selectedStatus;

          if (matchesSearch && matchesCategory && matchesStatus) {
            htmlCard.style.display = 'block';
            sectionVisibleCount++;
            totalVisibleCount++;
          } else {
            htmlCard.style.display = 'none';
          }
        });

        // Hide section if no visible cards
        if (sectionVisibleCount === 0) {
          htmlSection.style.display = 'none';
        } else {
          htmlSection.style.display = 'block';
        }
      });

      // Update count
      visibleCountSpan.textContent = totalVisibleCount.toString();

      // Show/hide empty state
      if (totalVisibleCount === 0) {
        sections.forEach(s => (s as HTMLElement).style.display = 'none');
        emptyState.classList.remove('hidden');
      } else {
        emptyState.classList.add('hidden');
      }
    }

    function clearFilters() {
      if (!searchInput || !categoryFilter || !statusFilter) return;

      searchInput.value = '';
      categoryFilter.value = 'all';
      statusFilter.value = 'all';
      filterPlugins();
    }

    // Event listeners
    searchInput?.addEventListener('input', filterPlugins);
    categoryFilter?.addEventListener('change', filterPlugins);
    statusFilter?.addEventListener('change', filterPlugins);
    clearAllBtn?.addEventListener('click', clearFilters);
    clearEmptyBtn?.addEventListener('click', clearFilters);

    // Initial filter
    filterPlugins();
  });
</script>
