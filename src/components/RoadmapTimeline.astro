---
export interface Props {
  milestones: Array<{
    id: string;
    status: 'completed' | 'in-progress' | 'upcoming';
    title: string;
    date?: string;
    targetDate?: string;
    progress?: number;
    description: string;
    deliverables?: string[];
  }>;
  class?: string;
}

const { milestones, class: className = '' } = Astro.props;

function formatDate(dateString: string) {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

function getStatusIcon(status: string) {
  switch(status) {
    case 'completed': return '✓';
    case 'in-progress': return '⏳';
    case 'upcoming': return '○';
    default: return '○';
  }
}

function getStatusColor(status: string) {
  switch(status) {
    case 'completed': return 'text-status-success border-status-success';
    case 'in-progress': return 'text-huitzo-accent border-huitzo-accent';
    case 'upcoming': return 'text-text-muted border-huitzo-border';
    default: return 'text-text-muted border-huitzo-border';
  }
}
---

<div class={`timeline ${className}`}>
  {milestones.map((milestone) => (
    <div class="timeline-item">
      <div class={`timeline-marker ${milestone.status} ${getStatusColor(milestone.status)}`}>
        <span class="text-xs font-mono">{getStatusIcon(milestone.status)}</span>
      </div>

      <div class="card ml-4">
        <div class="flex items-start justify-between mb-3">
          <h3 class="text-xl font-semibold text-text-primary">{milestone.title}</h3>
          <span class={`text-xs px-2 py-1 rounded-full ${
            milestone.status === 'completed' ? 'bg-status-success/20 text-status-success' :
            milestone.status === 'in-progress' ? 'bg-huitzo-accent/20 text-huitzo-accent' :
            'bg-huitzo-border/20 text-text-muted'
          }`}>
            {milestone.status.replace('-', ' ').toUpperCase()}
          </span>
        </div>

        <div class="mb-3">
          {milestone.date && (
            <p class="text-sm text-status-success font-medium">
              Completed: {formatDate(milestone.date)}
            </p>
          )}
          {milestone.targetDate && (
            <p class="text-sm text-text-secondary">
              Target: {formatDate(milestone.targetDate)}
            </p>
          )}
        </div>

        {milestone.progress !== undefined && (
          <div class="mb-4">
            <div class="flex items-center justify-between mb-2">
              <span class="text-sm text-text-secondary">Progress</span>
              <span class="text-sm font-mono text-huitzo-accent">{milestone.progress}%</span>
            </div>
            <div class="progress-bar">
              <div class="progress-fill" style={`width: ${milestone.progress}%`}></div>
            </div>
          </div>
        )}

        <p class="text-text-secondary leading-relaxed mb-4">{milestone.description}</p>

        {milestone.deliverables && milestone.deliverables.length > 0 && (
          <div>
            <h4 class="text-sm font-semibold text-text-primary mb-2">Key Deliverables:</h4>
            <ul class="space-y-1">
              {milestone.deliverables.map((deliverable) => (
                <li class="text-sm text-text-secondary flex items-start">
                  <span class="text-huitzo-accent mr-2 mt-1">•</span>
                  <span>{deliverable}</span>
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>
    </div>
  ))}
</div>